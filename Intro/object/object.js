'use strict';
// обєкт це структура данних, яка представляє собою сукупність властивостей та
// їх значень.
const obj = {
    name: 'misha', 
    age: 24,
};

obj.sex = 'male';
obj.lang = 'Ukr';

// Щоб перебрати обєкт можна використовувати цикл for..in
for(let key in obj) {
}

// видалення властивості:
delete obj.lang;



//======================= Map =============================



/* Map - це колекція ключ\значення, як і Object, але відрізняється тим, що в якості ключа
може використовуватись ключ будь якого типу */


// 1. Створення колекції
const newMap = new Map();

// 2. Додавання в колекцію ключу та значення для нього
newMap.set({foo:'bar'}, [1,2]);
newMap.set('ann', 'female');

// 3. можна повернути значення по ключу
newMap.get('ann'); /* output: ann */

// 4. Можна перевірити чи існує певний ключ в колекції
newMap.has('ann'); /* output: true */

// 5. Можна видалити єлемент по певному ключу
newMap.delete('add');

// 6.Можна повністю очистити колекцію від всіх значень
newMap.clear();

// 7. Можна дізнатись поточну кількість елементів в колекції
newMap.size;

// В Обєкта Map існують методи перебору, такі як:
newMap.keys();
newMap.values();
newMap.entries();
newMap.forEach((value,key,map) => {})




//======================= Set =============================



/* Об'єкт Set - це особливий вид колекції: "множина" значень (без ключів), 
де кожне значення може з'являтися лише один раз. */

const someArr = [1,2,3,5,2,1, {foo:'bar'}, {foo:'bar'}];

// 1. Створення колекції
const newSet = new Set(someArr);

// 2. Додавання нового елементу (якщо вже є такий то не додається)
newSet.add(8);

// 3. Видалення елементу
newSet.delete(8);

// 4. Можна перевірити чи існує певний ключ в колекції
newSet.has(2) /* output: true */

// 5. Можна повністю очистити колекцію
newSet.clear();

// 6. Можна дізнатись кількість елементів
newSet.size;


// В Обєкта Set існують методи перебору, такі як:

for(values of newSet){};
// або
newSet.forEach((value, valueAgain, set) => {});


//======================= WeakMap =============================

// Перша відмінність від Map в тому, що ключі в WeakMap повинні бути об'єктами,
//  а не примітивними значеннями

// 1. Створення колекції
const newWeakmap = new WeakMap();
const weakObj = {name: 'Misha'};

newWeakmap.set(weakObj, 'male');

// 2. можна повернути значення по ключу
newWeakmap.get(weakObj); /* output: male */

// 3. Можна перевірити чи існує певний ключ в колекції
newWeakmap.has(weakObj); /* output: true */

// 4. Можна видалити єлемент по певному ключу
newWeakmap.delete(weakObj);

/* WeakMap не підтримує перебір і методи keys(), values(), entries(), 
тому немає способу взяти всі ключі чи значення з неї. */

// Підходить для кешування даних, для додаткового сховища даних і тп




//======================= WeakSet =============================




// Колекція WeakSet поводиться схоже:

// == Вона аналогічна Set, але ми можемо додавати WeakSet тільки об'єкти (не примітивні значення).

// == Об'єкт присутній у безлічі лише до того часу, поки доступний десь ще.

// == Як і Set, вона підтримує add, has і delete, але не size, keys() і не перебирається.

